{"version":3,"sources":["components/Login.js","App.js","reportWebVitals.js","index.js"],"names":["Login","useState","username","setUsername","password","setPassword","localStorage","getItem","loggedInUser","setLoggedInUser","incorrect","setIncorrect","handleSubmit","e","a","preventDefault","axios","get","params","then","response","data","success","console","log","user","setItem","catch","err","error","onClick","clear","onSubmit","htmlFor","type","value","onChange","target","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PA4EeA,EAzED,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACXC,EADW,KACDC,EADC,OAEcF,mBAAS,IAFvB,mBAEXG,EAFW,KAEDC,EAFC,OAGsBJ,mBAASK,aAAaC,QAAQ,aAHpD,mBAGXC,EAHW,KAGGC,EAHH,OAIgBR,oBAAS,GAJzB,mBAIXS,EAJW,KAIAC,EAJA,KAMZC,EAAY,uCAAG,WAAMC,GAAN,SAAAC,EAAA,sDACnBD,EAAEE,iBACFC,IAAMC,IAAI,cAAe,CACvBC,OAAQ,CACNhB,SAAUA,EACVE,SAAUA,KAEXe,MAAK,SAAAC,GACAA,EAASC,KAAKC,SAEhBC,QAAQC,IAAIJ,EAASC,KAAKI,MAC1BhB,EAAgBW,EAASC,KAAKI,KAAKvB,UAEnCI,aAAaoB,QAAQ,WAAYxB,IAIjCS,GAAa,GAEfY,QAAQC,IAAIJ,EAASC,SAEtBM,OAAM,SAAAC,GACLL,QAAQM,MAAMD,MAtBC,2CAAH,sDAmClB,OAAqB,OAAjBpB,EAEA,gCACE,gCAAMA,EAAN,mBACA,wBAAQsB,QAbO,WACnB3B,EAAY,IACZE,EAAY,IACZI,EAAgB,MAChBE,GAAa,GACbL,aAAayB,SAQT,uBAOJ,uBAAMC,SAAUpB,EAAhB,UACE,8BAAMF,GAAa,mDACnB,uBAAOuB,QAAQ,WAAf,wBACA,uBACEC,KAAK,OACLC,MAAOjC,EACPkC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBlC,EAAYkC,EAAOF,UAE/C,gCACE,uBAAOF,QAAQ,WAAf,wBACA,uBACEC,KAAK,WACLC,MAAO/B,EACPgC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBhC,EAAYgC,EAAOF,aAGjD,wBAAQD,KAAK,SAAb,uBC9DSI,G,MANH,WACV,OACE,cAAC,EAAD,MCOWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.39371ccf.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\n\nconst Login = () => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loggedInUser, setLoggedInUser] = useState(localStorage.getItem(\"username\"));\n  const [incorrect, setIncorrect] = useState(false);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    axios.get(\"/api/login/\", {\n      params: {\n        username: username,\n        password: password\n      }})\n      .then(response => {\n        if (response.data.success) {\n          // set the state of the user\n          console.log(response.data.user)\n          setLoggedInUser(response.data.user.username)\n          // store the user in localStorage\n          localStorage.setItem('username', username)\n\n        }\n        else {\n          setIncorrect(true)\n        }\n        console.log(response.data)\n      })\n      .catch(err => {\n        console.error(err)\n      });\n  };\n\n  const handleLogout = () => {\n    setUsername(\"\");\n    setPassword(\"\");\n    setLoggedInUser(null);\n    setIncorrect(false);\n    localStorage.clear();\n  };\n\n  // if there's a user show the message below\n  if (loggedInUser !== null) {\n    return (\n      <div>\n        <div>{loggedInUser} is logged in</div>\n        <button onClick={handleLogout}>logout</button>\n      </div>\n    )\n  }\n\n  // if there's no user, show the login form\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>{incorrect && <p>Incorrect login!</p>}</div>\n      <label htmlFor=\"username\">Username: </label>\n      <input\n        type=\"text\"\n        value={username}\n        onChange={({ target }) => setUsername(target.value)}\n      />\n      <div>\n        <label htmlFor=\"password\">Password: </label>\n        <input\n          type=\"password\"\n          value={password}\n          onChange={({ target }) => setPassword(target.value)}\n        />\n      </div>\n      <button type=\"submit\">Login</button>\n    </form>\n  );\n};\n\nexport default Login;\n","import Login from './components/Login.js';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <Login/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}