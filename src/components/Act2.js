import React, { Component } from "react"
import axios from "axios"
import { Typography, Popover } from "@material-ui/core"
import { withStyles } from "@material-ui/styles"
import { Link } from "react-router-dom"
import { S3Url, getBit, countSetBits } from "../helpers.js"
import DialogueBox from "./UI/DialogueBox"
import text from "../text/act2Scripts"

const pin1 = {
  width: "5%",
  height: "15%",
  left: "37%",
  top: "15%",
  position: "absolute",
  cursor: "pointer",
  display: "block",
  overflow: "hidden",
}

const pin2 = {
  width: "5%",
  height: "15%",
  left: "5%",
  top: "64%",
  position: "absolute",
  cursor: "pointer",
  display: "block",
  overflow: "hidden",
}

const pin3 = {
  width: "5%",
  height: "15%",
  left: "31%",
  top: "58%",
  position: "absolute",
  cursor: "pointer",
  display: "block",
  overflow: "hidden",
}

const pin4 = {
  width: "5%",
  height: "15%",
  left: "65%",
  top: "13%",
  position: "absolute",
  cursor: "pointer",
  display: "block",
  overflow: "hidden",
}

const pin5 = {
  width: "5%",
  height: "15%",
  left: "60%",
  top: "70%",
  position: "absolute",
  cursor: "pointer",
  display: "block",
  overflow: "hidden",
}

const pin6 = {
  width: "5%",
  height: "15%",
  left: "45%",
  top: "32%",
  position: "absolute",
  cursor: "pointer",
  display: "block",
  overflow: "hidden",
}

const useStyles = (theme) => ({
  popover: {
    pointerEvents: "none",
  },
  paper: {
    padding: theme.spacing(1),
  },
})

class Act2 extends Component {
  constructor(props) {
    super(props)
    this.state = {
      name: null,
      address: null,
      solved_puzzles: 0,
      solved: 0,
      anchorEl: null,
    }
  }

  componentDidMount() {
    this.getSolvedPuzzles()
  }

  getSolvedPuzzles = () => {
    axios
      .get(`/api/team/${this.props.teamId}/`)
      .then((res) => {
        this.setState({
          solved_puzzles: parseInt(res.data.puzzles_done),
        })
      })
      .catch((err) => {
        console.error(err)
      })
  }

  handlePopoverOpen = (event) => {
    const id = parseInt(event.currentTarget.getAttribute("id"))

    this.setState({
      name: event.currentTarget.getAttribute("title"),
      address: event.currentTarget.getAttribute("address"),
      solved: getBit(this.state.solved_puzzles, id),
      anchorEl: event.currentTarget,
    })
    // Check that both crosswords are solved
    // if (id === 3) {
    //   this.setState({
    //     solved: this.state.solved && getBit(this.state.solved_puzzles, 7),
    //   })
    // }
  }

  handlePopoverClose = () => {
    this.setState({
      anchorEl: null,
    })
  }

  render() {
    const open = Boolean(this.state.anchorEl)

    return (
      <>
        {/* {!this.props.introPlayed && (
          <DialogueBox
            data={text.act2Intro}
            onEnd={() => this.props.setIntroPlayed("intro2Played")}
          />
        )} */}
        {/* Image Map Generated by https://12oss.github.io/linkresponsively/ */}
        <div style={{ float: "left", position: "relative", width: "100%" }}>
          <img src={`${S3Url}/map.svg`} width="100%" />
          <Link
            title="Breath of the Wild"
            address="Rm. B108"
            to="/act2/botw"
            aria-owns={open ? "mouse-over-popover" : undefined}
            aria-haspopup="true"
            onMouseEnter={this.handlePopoverOpen}
            onMouseLeave={this.handlePopoverClose}
            id="1"
            style={pin1}
          >
            <img src={`${S3Url}/purple_pin.svg`} height="100%" />
          </Link>
          <Link
            title="Code Transcription"
            address="Scrap Store"
            to="/act2/code"
            aria-owns={open ? "mouse-over-popover" : undefined}
            aria-haspopup="true"
            onMouseEnter={this.handlePopoverOpen}
            onMouseLeave={this.handlePopoverClose}
            id="2"
            style={pin2}
          >
            <img src={`${S3Url}/purple_pin.svg`} height="100%" />
          </Link>
          <Link
            title="Crossword"
            address="Abandoned Office"
            to="/act2/crossword"
            aria-owns={open ? "mouse-over-popover" : undefined}
            aria-haspopup="true"
            onMouseEnter={this.handlePopoverOpen}
            onMouseLeave={this.handlePopoverClose}
            style={pin3}
            id="3"
          >
            <img src={`${S3Url}/purple_pin.svg`} height="100%" />
          </Link>
          <Link
            title="ID Card"
            address="Dark Alleyway"
            to="/act2/id"
            aria-owns={open ? "mouse-over-popover" : undefined}
            aria-haspopup="true"
            onMouseEnter={this.handlePopoverOpen}
            onMouseLeave={this.handlePopoverClose}
            style={pin4}
            id="4"
          >
            <img src={`${S3Url}/purple_pin.svg`} height="100%" />
          </Link>
          <Link
            title="Spot the Difference"
            address="Data Warehouse"
            to="/act2/spot"
            aria-owns={open ? "mouse-over-popover" : undefined}
            aria-haspopup="true"
            onMouseEnter={this.handlePopoverOpen}
            onMouseLeave={this.handlePopoverClose}
            style={pin5}
            id="5"
          >
            <img src={`${S3Url}/purple_pin.svg`} height="100%" />
          </Link>
          {countSetBits(this.state.solved_puzzles) >= 5 && (
            <Link
              title="Meta"
              address="Contractor's Office"
              to="/act2/meta"
              aria-owns={open ? "mouse-over-popover" : undefined}
              aria-haspopup="true"
              onMouseEnter={this.handlePopoverOpen}
              onMouseLeave={this.handlePopoverClose}
              style={pin6}
              id="6"
            >
              <img src={`${S3Url}/pink_pin.svg`} height="100%" />
            </Link>
          )}
          <Popover
            id="mouse-over-popover"
            className={this.props.classes.popover}
            classes={{
              paper: this.props.classes.paper,
            }}
            open={open}
            anchorEl={this.state.anchorEl}
            anchorOrigin={{
              vertical: "bottom",
              horizontal: "left",
            }}
            transformOrigin={{
              vertical: "top",
              horizontal: "left",
            }}
            onClose={this.handlePopoverClose}
            disableRestoreFocus
          >
            <Typography>
              <h3>{this.state.address}</h3>
              <h4>{this.state.name}</h4>
              {this.state.solved ? <p>Solved!</p> : <p>Not solved</p>}
            </Typography>
          </Popover>
        </div>
      </>
    )
  }
}
export default withStyles(useStyles)(Act2)
